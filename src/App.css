:root {
  --ratio: 1.5;
  --s-5: calc(var(--s-4) / var(--ratio));
  --s-4: calc(var(--s-3) / var(--ratio));
  --s-3: calc(var(--s-2) / var(--ratio));
  --s-2: calc(var(--s-1) / var(--ratio));
  --s-1: calc(var(--s0) / var(--ratio));
  --s0: 1rem;
  --s1: calc(var(--s0) * var(--ratio));
  --s2: calc(var(--s1) * var(--ratio));
  --s3: calc(var(--s2) * var(--ratio));
  --s4: calc(var(--s3) * var(--ratio));
  --s5: calc(var(--s4) * var(--ratio));

  --measure: 60ch;

  --color-light: lab(74.42% 0 -0.01);
  --color-dark: lab(9.26% 0 0);
  --color-green: oklab(60% -50% 50%);
  --color-red: oklab(51.902% 0.18588 0.10399);
  --color-purple: oklab(39.415% 0.1566 -0.07404);
  --color-blue: oklab(65.83% 0.04769 -0.11698);
  --contrast: 2.5;

  background-color: var(--color-dark);
}
* {
  max-inline-size: var(--measure);
}

html,
body,
div,
header,
nav,
main,
footer {
  max-inline-size: none;
}

.box,
button:not(.no-box) {
  padding: var(--s0);
  background-color: hsl(from var(--color-dark) h s calc(l + var(--contrast)));

  border: none;
  border-radius: 0;
  --color-border: var(--color-dark);
  box-shadow: inset -2px -2px
      hsl(from var(--color-border) h s calc(l + 2 * var(--contrast))),
    inset 2px 2px
      hsl(from var(--color-border) h s calc(l + 8 * var(--contrast))),
    inset -3px -3px
      hsl(from var(--color-border) h s calc(l + 2 * var(--contrast))),
    inset 3px 3px
      hsl(from var(--color-border) h s calc(l + 2 * var(--contrast)));
}
button {
  background-color: hsl(
    from var(--color-dark) h s calc(l + 1.2 * var(--contrast))
  );
  padding: var(--s-2) var(--s-1);
}
button:hover {
  --contrast: 4;
}
button.slim {
  padding: var(--s-3) var(--s-1);
}

.box * {
  color: inherit;
}

.stack {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack > * {
  margin-block: 0;
}

.stack > * + * {
  margin-block-start: var(--s-3);
}

.stack:only-child {
  block-size: 100%;
}

.stack > :nth-child(10) {
  margin-block-end: auto;
}

.with-sidebar {
  display: flex;
  flex-wrap: wrap;
  gap: var(--s1);
}

.with-sidebar > :last-child {
  flex-grow: 1;
}

.with-sidebar > :first-child {
  flex-basis: 0;
  flex-grow: 999;
  min-inline-size: 20%;
}

.frame {
  --n: 16;
  --d: 9;
  aspect-ratio: var(--n) / var(--d);
  overflow: hidden;
  display: flex;
  justify-content: center;
  align-items: center;
}

.frame > img,
.frame > video,
.frame > canvas {
  inline-size: 100%;
  block-size: 100%;
  object-fit: cover;
}

.cluster {
  display: flex;
  flex-wrap: wrap;
  gap: var(--space, 1rem);
  justify-content: flex-start;
  align-items: center;
}

.cover {
  display: flex;
  flex-direction: column;
  min-block-size: 100vh;
  min-inline-size: 100vw;
  padding: 1rem;
}

.cover > * {
  margin-block: auto;
}

.center {
  box-sizing: content-box;
  margin-inline: auto;
}

.grid {
  display: grid;
  grid-template-columns: auto auto;
  gap: 1rem;
}

.subgrid {
  display: grid;
  grid-template-columns: subgrid;
  grid-column: 1 / span 2;
}

.pill {
  display: flex;
  align-items: center;
  border-radius: var(--s1);
  gap: 0.5rem;
  outline: 2px solid
    hsl(from var(--color-dark) h s calc(l + 2 * var(--contrast)));
  padding-inline: var(--s-2);
  padding-block: var(--s-5);

  & > *:nth-child(1) {
    order: 0;
  }
  & > *:nth-child(2) {
    order: 2;
  }

  &::after {
    background-color: hsl(
      from var(--color-dark) h s calc(l + 2 * var(--contrast))
    );
    align-self: stretch;
    min-width: 0.1rem;
    content: "";
    order: 1;
  }
}

.small:not(.box) {
  font-size: var(--s-1);
}

.cluster.small {
  gap: var(--s-3);
}
.box.small {
  padding: var(--s-1);
}

.layout {
  min-inline-size: 100vw;
  min-block-size: 100vh;
  display: grid;
  grid-template-columns: 50% auto;
  gap: 1rem;
  padding: 1rem;
}

.far {
  background: hsl(from var(--color-dark) h s calc(l - 1 * var(--contrast)));
  border: none;
  border-radius: 0;
  box-shadow: inset -2px -2px
      hsl(from var(--color-dark) h s calc(l + 1 * var(--contrast))),
    inset 2px 2px hsl(from var(--color-dark) h s calc(l + 1 * var(--contrast))),
    inset -3px -3px
      hsl(from var(--color-dark) h s calc(l + 8 * var(--contrast))),
    inset 3px 3px hsl(from var(--color-dark) h s calc(l + 1 * var(--contrast)));
}

@property --turn {
  syntax: "<angle>";
  inherits: false;
  initial-value: 0turn;
}

@keyframes active-border {
  0% {
    --turn: 0turn;
  }
  100% {
    --turn: 1turn;
  }
}
.node.active {
  border: 2px transparent solid;
  background-image: linear-gradient(
      var(--color-dark) 0%,
      var(--color-dark) 100%
    ),
    linear-gradient(var(--turn), var(--color-light), var(--color-dark));
  background-size: cover, cover;
  background-position: 0% 0%, 0% 0%;
  background-clip: padding-box, border-box;
  background-origin: border-box;
  background-color: unset;
  animation-name: active-border;
  animation-duration: 2s;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
}

.tabs {
  .tab[data-open="false"] {
    display: none;
    /* flex-basis: 0; */
  }
}

button:disabled {
  border-color: hsl(from var(--color-dark) h s calc(l + -3 * var(--contrast)));

  &:hover {
    outline: none;
    cursor: not-allowed;
  }
}

h2 {
  font-size: var(--s0);
}

.fade {
  transition: all;
  transition-duration: 800ms;
}

@keyframes spin {
  0% {
    transform: rotate(0turn) translateY(0%);
  }
  5% {
    transform: rotate(0turn) translateY(10%);
  }
  10% {
    transform: rotate(0turn) translateY(0%);
  }
  15% {
    transform: rotate(0turn) translateY(10%);
  }
  20% {
    transform: rotate(0turn) translateY(0%);
  }
  50% {
    transform: rotate(0turn) translateY(0%);
  }
  100% {
    transform: rotate(1turn) translateY(0%);
  }
}
.icon.spin {
  animation-name: spin;
  animation-duration: 0.8s;
  animation-iteration-count: infinite;
}

@property --t {
  syntax: "<number>";
  inherits: true;
  initial-value: 0;
}
@property --x {
  syntax: "<number>";
  inherits: true;
  initial-value: 0;
}
@property --y {
  syntax: "<number>";
  inherits: true;
  initial-value: 0;
}

@keyframes double-flash {
  0% {
    --t: 0;
  }
  1% {
    --t: 1;
    --x: 1;
    --y: 1;
  }
  10% {
    --t: 1;
    --x: 0;
    --y: 0;
  }
  15% {
    --t: 0;
    --x: 0;
    --y: 0;
  }
  20% {
    --t: 1;
    --x: 0;
    --y: 1;
  }
  30% {
    --t: 1;
    --x: 1;
    --y: 0;
  }
  35% {
    --t: 0;
  }
  100% {
    --t: 0;
  }
}
div:has(> .icon.double-flash) {
  position: relative;

  .dot {
    position: absolute;
    left: 50%;
    top: 50%;
    filter: blur(calc(2px + var(--t) * 1px));
    opacity: calc((2 + 1) / (1 + 2 * var(--t)));
    transform: translate(
      calc(var(--x) * 10px - 5px),
      calc(var(--y) * 10px - 5px)
    );
    transform-origin: center;
    background-color: white;
    width: 0.1rem;
    height: 0.1rem;
    border-radius: 100%;
    animation-name: double-flash;
    animation-duration: 0.8s;
    animation-iteration-count: infinite;
    animation-timing-function: ease-in-out;
  }
}
.icon[data-status="loaded"] {
  color: var(--color-green);
}
@keyframes refetching {
  0% {
    stroke-width: 1px;
    color: oklab(60% -50% 50%);
  }
  5% {
    stroke-width: 30px;
    color: oklab(75.81% 0.00183 -0.08311);
  }
  /* 10% {
    stroke-width: 1px;
    color: oklab(60% -50% 50%);
  }

  15% {
    stroke-width: 30px;
    color: oklab(80.915% 0.0026 -0.08448);
  } */
  11% {
    stroke-width: 1px;
    color: oklab(60% -50% 50%);
  }
}
.icon[data-status="refetching"] {
  * {
    transition: all;
    transition-duration: 200ms;
    animation-name: refetching;
    animation-iteration-count: infinite;
    animation-duration: 3s;
    animation-timing-function: cubic-bezier(0, 1, 0.02, 1);
    animation-fill-mode: both;
  }
}
.icon {
  * {
    transition: all;
    transition-duration: 300ms;
  }
}
.icon[data-status="no-access"] {
  color: var(--color-red);
}

.logs {
  display: flex;
  flex-direction: column;
  gap: var(--s-2);
  .contrast {
    border-left: 1px solid var(--color-light);
    border-top: 1px solid var(--color-light);
    padding-left: 0.2rem;
  }
}

.scroll {
  overflow-y: scroll;
  max-height: 40vh;
}

.pulsar {
  position: absolute;
  top: 0;
  left: 0;
  width: 3rem;
  height: 3rem;

  background-color: purple;
  opacity: 0;
  visibility: hidden;
  &.active {
    visibility: initial;
  }
}

.overlay {
  position: fixed;
  bottom: 1rem;
  left: 1rem;
  background-blend-mode: overlay;
  background-color: hsl(
    from var(--color-dark) h s calc(l + var(--t) * var(--contrast))
  );
  --t: 1;

  transition: all;
  transition-duration: 0.05s;
}
.overlay:hover {
  --t: 2;
}

.apart {
  justify-content: space-between;
}

.relative {
  position: relative;
}
.outside-right {
  position: absolute;
  left: 110%;
  width: max-content;
  top: 0.1rem;
}

.react-flow__edge {
  --xy-edge-stroke: hsl(
    from var(--color-light) h s calc(l - 15 * var(--contrast))
  );
}

.drop-area {
  position: relative;
  filter: saturate(1.5);
  cursor: pointer;
  transition-property: all;
  transition-duration: 0.2s;

  * {
    transition-property: all;
    transition-duration: 0.2s;
  }
}
.drop-area[data-invalid] {
  background-color: hsl(from var(--color-red) h 25 20);
}
.drop-area[data-dragging] {
  * {
    filter: blur(10px);
  }
}

header.small {
  font-size: var(--s5);
}
